; ---------------------------------------------------------
; rgb256  Mode 0 trames 2x2 for 256 colors (format GGGRRRBB) 

; See rgb256u.o for demo
; madram feb 2023 for emotion trouble
; dedicated to herica

; Difference with rgb2vga:
  ; - simpler
  ; - compress better?   
  ; - more importantly: applicable for bitmap (use palette),
                      ; while rgb2vga is good for rasters

force_alt = 1           ; hack for nicer dithering

make_grb_trames
; Create trames.

; IN: DE=table to file (expect aligned XX00)
; OUT: table[GRB color]      = upper trame
     ; table[GRB color]+&100 = lower trame

.col_lp
; E = Index in table = Color in gggrrrbb format

          ld c,e
          call pix_err
          add a:ld b,a
          call pix_err
          or b:ld (de),a:inc d

      IF force_alt
; Put original pix bottom right, to ensure nice dithering.
; TODO: then only half the error should be compensated, but for now
; we aim for short code and nice enough result.
          and &AA:rrca:ld b,a
          call pix_err
          add a
      ELSE
; The error is propagated clockwise in the trame,
; to get trame alternance.
          call pix_err
          ld b,a
          call pix_err
          add a
      END

          or b:ld (de),a:dec d
          inc e
          jr nz,.col_lp
          ret

pix_err
; Give L=ink closest to A=GRB, and return A=GRB' compensating error   

; Input:  C = gggrrrbb                     
; Output: A = 0x0x0x0x (INK encoded as pixel right)
        ; C = C - (GRB(L) - C)  I.e. remove error component.  
       ; B, DE preserved

; We find the closest ink (0 to F in hexa), distributed as such
; among the 27 cpc colors (see /palette/):

;        G=0      G=1      G=2

;R=0     012      8.9      C.D
;R=1     345      ...      ...
;R=2     6.7      A.B      E.F

; For G, R we have 8 levels, mapped: 0,1,2 -> 0   3,4 -> 1   5,6,7 -> 2
        ; when G >= 3 , R is mapped: 0..3  -> 0              4..7  -> 2
; For Blue we have 4 levels, mapped: 0,1   -> 0   2   -> 1   3     -> 2
        ; when G >= 3 , B is mapped: 0,1   -> 0              2,3   -> 2
; i.e we privilegate extreme luminosity (0 and 2) for enhanced contrast.
; For blue it also simplifies the test.

g_weight = &20          ; Weight of g in gggrrrbb encoding
rb_mask = &1F
r_weight = 4
r_msb = 4               ; Most significant bit of r in that encoding
b_msb = 1
b_sb  = 0               ; Second most significant bit!

; Note: we could cut at other value (e.g 2*g_weight + 4*r_weight)
; -> more evenly distributed luminosity
; -> more compressible with adequate value 
          ld a,c
          cp 3*g_weight:ld l,0:jr c,.g0 ; l = ink
          cp 5*g_weight:ld l,8:jr c,.g1
;.g2
          ld l,12
.g1                     ; same than .g2, with different initial ink
          bit r_msb,a:jr z,.r_ok
          2 ** inc l
.r_ok
          bit b_msb,a:jr z,.b_ok
          inc l
.b_ok
          jr .com

.g0
; We have more resolution for r and b.     
          and rb_mask   ; needed for CP
          cp 3*r_weight:jr c,.r0:3 ** inc l
          cp 5*r_weight:jr c,.r1:3 ** inc l
          jr .r_ok
.r0
.r1                     ; Same than .r0, with different initial ink
          bit b_msb,a:jr z,.com:inc l
          bit b_sb,a:jr z,.com:inc l
.com
; Here l=ink    
          ld a,l
          add a
          add grb_pix AND &FF ; Could be optimised if aligned
          ld l,a
          ld h,grb_pix/&0100

          ld a,c
          add a:sub (hl) ; correction color
          ld c,a
          inc hl        ; could be 'inc l' 
          ld a,(hl)     ; pixel
          ret

palette
; Optimal palette to cover all RGB space
; If palette is changed, /grb_pix/ below must be adapted
; and /pix_err/ routine shall be adapted.
; In fact, this palette isn't used at all here.
      BYTE 0,1,2,3
      BYTE 4,5,6,8      ; 7 obtained by mix of 6/8
      BYTE 9,11,15,17   ; 10=9/11, 12=9/15, 13=11/15 etc
      BYTE 18,20,24,26  ; 19=18/20 etc
grb_pix
; GRB, right pixel
      BYTE %00000000,%00000000 ; 0
      BYTE %00000010,%01000000 ; 1
      BYTE %00000011,%00000100 ; 2
      BYTE %00010000,%01000100 ; 3
      BYTE %00010010,%00010000 ; 4
      BYTE %00010011,%01010000 ; 5
      BYTE %00011100,%00010100 ; 6
      BYTE %00011111,%01010100 ; 8
      BYTE %10000000,%00000001 ; 9
      BYTE %10000011,%01000001 ; 11
      BYTE %10011100,%00000101 ; 15
      BYTE %10011111,%01000101 ; 17
      BYTE %11100000,%00010001 ; 18
      BYTE %11100011,%01010001 ; 20
      BYTE %11111100,%00010101 ; 24
      BYTE %11111111,%01010101 ; 26

      IF grb_pix/&0100 - $/&0100
 !! error. Table should stay in same &100 section.
      END

