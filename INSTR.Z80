todo  = 1
may_optim = 1
may_crunch = 1

      IMPORT "plyconf.i"

dev_checks = 0 AND ayane ; deactivate: otherwise TM doesn't fit

; Routine for each type of intruments:
      ; - instr_null
      ; - instr_default
      ; - !!! chip removed

; Limitations:
   ; - only works for fixed /regs/ address XX00. 

      IF ayane
      IMPORT "const.i"  ; instr_head_size
      IMPORT "memmap.i" ; BK_INSTR, instr_idx, psg_regs
      IMPORT "periods.o"
      IF sfx
      IMPORT "timer.o"  ; for ret_sp
      END
      ELSE
psg_regs = compiled_psg_regs
 ; instr is imported at start of ply.o (to ensure confinement)
 ; yet periods must go in its own &100 buffer at the end of code
      IF $ - $$
  !! unexpected
      END
save_org = $
      ORG compiled_periods
      IMPORT "periods.o"
      ORG save_org
      END


; \\\\\ 2024 ///
; ---- v0u ----
; Sep
  ;19 Rewrite /.special_fx/ to use SP (see rational there)
    ; Handle end of instrument
; ---- v0t ----
; Sep             
  ;   Rewrite instr_default to accomodate hard env and sync buzzer
       ; - Pass volume in ixh
       ; - Pass pitch in BC  
    ; Remove chipnsfx version, not worth maintaining:
       ; - For speed: No-fap
       ; - For crunch: No-fap or ad-hoc
       ; - For UI/crunch: plug "special column" in instr_defaut
              ; Or use hard-env!

; ---- v0n ----
; Aug
  ; 5 WIP Add timing
; Jun
; ---- v0l ----
  ; 22 Add param# in signature
  ; 11 Put signature before each instr
     ; Reorder code so all amorces fit in &100 
            ; Plus, compress better:
               ; + similar code together
               ; - JPs instead or similar JRs
                   ; -> This one can change if we handle noise first
                      ; and factorise vib/vib_noise (same for arp) 
; ---- v0k ----
  ;  3 Fix LSB static checks (handle when instr no assembled)
     ; enable /instr_chip_down_arp/
; May
  ; 20 Add variants:
           ; - instr_chip_down_arp
           ; - instr_chip_down_vib_noise
     ; Make instr_state_pnt a variable for better crunching
; ---- v0h ----
  ; 14 Fix 'table link' in compiled version
     ; Optimise instr_chip_down_vib (no noise: no need to touch r7)
; Apr            
  ; 29 Add instr_chip_down_arp_noise
; ---- v0g ----
  ; 22 Don't handle volume if use_volume = 0
  ; 14 Add instr_null
  ; 11 Filter loop bit flag
     ; instr_chip_down_vib: fix reg 7 handling

; Mar 
  ;31: instr_chip_down_vib: proper init
  ; 30: Add amorce code
      ; Use INC HL as rows aren't confined anymore.
        ; We might revisit that if we really need speed.
      ; Optimise instr_default!
; Madram 25 Feb 2024. v0

loop_bit = 7
fail  = &BE00

r6    = psg_regs+6
r7    = psg_regs+7
r11_12 = psg_regs+11
r13   = psg_regs+13
r14   = psg_regs+14     ; Reset by ply before iteration

      IF ayane
      IF $ AND &FF:ELSE
; LSB cannot be null: 00 used to flag empty instr.
; Hmm... we could use instr_null instead? nevermind.
; For compiled version: no such issue!
          nop
      END
      END

      IF dev_checks
 !!! no, doesn't fit in TM
      END

      MACRO EX_AF'
      IF sfx
          ex af,af
      END
      ENDM

      MACRO SUB_TM n
; Copy-paste from timer.o                  
      IF sfx
; Update counter TM (+2 for 'sub n' itself)
      IF n AND 1
; Resolution: 2-nops. Must compensate
          ld a,a:sub [n+3]/2
      ELSE
          sub [n+2]/2
      END
      END
      ENDM

      MACRO SUB_TM'' tm
      IF sfx
          ex af,af
          SUB_TM(tm+2)  ; +2 for "ex af,af"
          ex af,af
      END
      ENDM

      MACRO RET_ROUT tm
      IF sfx
          SUB_TM(tm+4)
          ret p
          exx:jp hl
      ELSE
          ret
      END
      ENDM

      MACRO RET_ROUT' tm
          EX_AF'()
          RET_ROUT(tm+1)
      ENDM


      MACRO CHECK_CONFINE
; For now constraint also in-tool
; Can aleviate that by storing ID instead of LSB
; Other mitigation possible: put instr_default last
      IF $/&0100 - instr_code/&0100
  !!! error confine 
      END
      ENDM

type_instr_null = 0
type_instr_mute = 1     ; todo 
type_instr_default = 2

instr_code              ; MSB needed by ply.o

VARIABLE_SIZE = -1      ; For rows

      MACRO SIGN type,paramsize,rowsize
; Order used by chung.Song_select_instr
      IF paramsize AND &FC ; >3
  !! for more than 3 params, make sure to export them
  ; as the are only 3 byte free in the header
      END

      BYTE rowsize      ; 0: no table associated. -1: variable
      BYTE paramsize
      BYTE type
      ENDM

          SIGN(type_instr_null,0,0)
instr_null
          pop hl        ; consume param
t
          pop hl        ; consume regs+mask
;Actually instr_mute:
 ; we set vol to 0 for minimala.chp: allows to open all channels
 ; inconditionnaly
; !!! NO !!! -> Lead to a bug, since now compile.o replace intermediary
; dummy row (for duration > &100) by instr_null (to avoid having to 
; deal with flags). So for minimala.chp it would cut the sound at
; iter &101 (i.e tick +1 from 2nd "pattern")
; Instead, we rely on regs 8,9,10 being 0 at init time
;          ld (hl),0                      
          pop hl        ; consume regs+vol            
          RET_ROUT(9)

instr_end
; After final row: mustn't touch anything.
   ; - Time efficient for buzzs
   ; - Needed for future: track mix
; Routine placed here to be reachable by jr
tm1_  = 8               ; for .exec to here
          pop hl        ; consume regs+vol
          pop hl        ; consume regs+mask            
          RET_ROUT(tm1_+6)

      IF ayane
; Not used to compile minimala.chp
          SIGN(type_instr_default,0,VARIABLE_SIZE)
instr_default
; Same API than /.exec/
          CHECK_CONFINE()
; First iteration
      IF ayane
 ; replace jp for next iterations
          SUB_TM(26)    ; until .exec
          EX_AF'()
          ld hl,.exec:push hl:pop hl
 ; get row pnt from header.
          pop hl
          ld a,(hl):inc hl ; !! cannot use E (= note)
          ld h,(hl):ld l,a
      IF dev_checks
; If wrong, typically BK_INSTR wasn't connected
          ld a,h:cp tables/&0100:call c,fail
          cp tables_/&0100:call nc,fail
; no loop in header.
          bit loop_bit,h:call nz,fail
          SUB_TM(18)
      END
          push hl
          EX_AF'()
;enchaine with .exec
.exec
      ELSE
;compiled: no indirection
 !! must handle instrument end then.
      END
; In:               
      ;ixh = Volume (row mitigated by general track volume)
           ; !! only if use_volume
      ;  E = Note (transposed)
      ; BC = accumulated pitch
      ; SP = Points on: - instr parameter
                      ; - Pnt to volume register (eg regs+8)
                      ; - Regs + channel masked (eg %110110 for A)  
      ;  A = TM
          pop hl        ; Instr table
          inc h:dec h:jr z,instr_end
tm1   = tm1_-1 + 65     ; Until jr ok_noise (taken)
          EX_AF'()
; Follow next link.
; Handling that first allows to skip optional field at the end for free
                          ; and use L or H to read last 
          ld a,e        ; free E and used below
          ld ixl,e      ; BASE note (for hard env and fx)
          ld e,(hl):inc hl
          ld d,(hl):inc hl
      IF ayane
          res loop_bit,d
      END
          push de       ; for next time
          pop de        ; skip

; Start by arpeggio and pitch, since we must do that anyway
; Except if absolute value, but:
   ; - We don't handle those anyway :)
          add (hl):inc hl
; Compute period now:
   ; - optimised since we read pitch anyway
   ; - allow to free DE
          ld e,a
          ld d,periods/&0100
; Keep in BC for subsequent fx
; (also, we delay poking it in period registers)
      IF use_phrase_pitch
          ld a,(de):add c:jr nc,$+3:inc b ;pitch fx
          add (hl):inc hl:ld c,a ; pitch instr
          inc e
          ld a,(de):adc b
          add (hl):inc hl:ld b,a
      ELSE
          ld a,(de):add (hl):inc hl:ld c,a
          inc e
          ld a,(de):adc (hl):inc hl:ld b,a
      END

; r7 
          pop de        ; Mask channel / noise for current channel

      IF use_flag_channel
; Flags channel/noise (copied in each channel)
          ld a,(hl)
          or e
          ex de,hl
          ld l,7
          and (hl)
          ld (hl),a
          ex de,hl
          bit 3,(hl):inc hl ; any bit 3,4,5 would work
          jr nz,.ok_noise

;Noise register: don't set if 0 (piloted from elsewhere)
          dec e         ; reg 6
          ld a,(de)     ; current value
          ld e,(hl)
          inc e:dec e:jr z,$+3:ld a,e
          ld (r6),a
          SUB_TM''(14-1) ; -1 for tm not taken
;enchaine
      ELSE
; Infer noise flag from noise value 
 !!! todo
      END
.ok_noise
          inc hl
; Volume, or env_hard:
    ;  xxxx0 -> vol xxxx (F=max volume)
    ; 1yyyy1 -> env hard            
          ld a,(hl):inc hl
      IF use_hard_env
tm2   = 10              ; until jr no_hard_env (taken)
          rrca
          jr nc,.no_hard_env

;env_type (bit 4 set for retrig)
tm_hard = 17            ; until jr abs_hard (taken)
          ld a,(hl):inc hl
          ld (r13),a
;arp
          ld a,(hl):inc hl
          cp ARP_ESC_SET
          jr z,.abs_hard

; Applicate arp+pitch to base note
; !!! Don't touch BC:   
    ; hasn't been poked yet
    ; it's still the base to use (well, unused feature now)
; Maybe we could use C for base note, since that's the most important
          add ixl
          ld e,a
          ld d,periods/&0100
; /16 (nops to psg) /16 (psg to env hard) -> /256
          ld a,(de):add (hl):inc hl ; Just for carry and bit 7 below
          ex de,hl
          inc l
          ld l,(hl):jr nc,$+3:inc l
; rounding to closest
          add a         ; if bit7
          ld a,(de):inc de:adc l:ld l,a
          ld h,0
          ld (r11_12),hl
          ld a,&10
          EX_AF'()
          SUB_TM(tm_hard+37-1) ; -1 jr abs_hard not taken
          jr .ok_vol

.abs_hard
; Absolute periode, don't change current period in BC
          ld e,(hl):inc hl
          ld d,(hl):inc hl
          ld (r11_12),de
          ld a,&10
          EX_AF'()
          SUB_TM(tm_hard+20)
          jr .ok_vol

      ELSE
 !!! todo
      END
.no_hard_env
      IF use_volume
tm2'  = 15
          sub ixh:jr nc,$+3:xor a ; a= clipped volume
      ELSE
tm2'  = 10
      END
          fx0_type - instr_hard_type ** inc hl ; skip hard env params
          ex de,hl
          EX_AF'()
          SUB_TM(tm2')
.ok_vol
tm3   = 25              ; until RET_ROUT'
          EX_AF'()
          pop hl
          ld (hl),a
 ; period register. Vol 8->0  9->2  10->4
 ; !!! Full 16 bits precisions. Converted on the fly,
     ; Since it's cumbersome to do it here (must preserve hl,de,bc)
          ld a,l:sub 8:add a:ld l,a
          ld (hl),c:inc l
          ld (hl),b

.special_fx
; Use SP:
   ; - Faster (e.g. sync buzzer 36 nops instead of 54)
   ; - Needed to interupt with timer
     ; Since whole instr routine might take more than 256 nops.
;Note: We could use sp for previous field. Not done for now:
     ; - Don't want to rewrite code (must rewrite ply as well to
         ; pass mask and volume before hand in one go)
     ; - Constraints might change (e.g. custom table for some fields)
     ; - YAGNI
          ld (ret_sp),sp
          ex de,hl
          ld sp,hl
          RET_ROUT'(tm1+tm2+tm3) ; fx_end or sync_buzzer


      ELSE
 !!! todo
      END
; --------------------------------------------------------

; ------------ Helpers ------------

      IF ayane

      IF 1-sfx
 !!! sfx expected to be on in ayane
  ; we use JP HL' here!
      END

fail  = &BE00

      MACRO CHECK_DI
      IF dev_checks
          call _check_di
      END
      ENDM

instr_setup
;----------
; For piano and instrnrt
; IN: L = instr number > 0
      IF instr_head_size-8
 !! review this
      END
      IF instr_idx AND &07FF
 !! review this
      END
          ld h,instr_idx / &0800
          3 ** add hl,hl

          ld bc,&7F00+BK_INSTR:out (c),c

          ld de,instr_code_pnt
          ldi
          ex de,hl
; Force MSB in case instr.o change it (post-amorce routine might be
; elsewhere);
          ld (hl),instr_code/&0100:inc hl
          ld (hl),e:inc hl
          ld (hl),d
          ret

MAX_TM = &80

instr_play
;---------
; For piano and instrnrt
; In: !! DI, instr_setup has been called
    ; A = note (e.g. 12 = C0)
    ; A' = TM
    ;HL' = timer routine
;Out: A = TM updated

;Note: cannot use ret_sp since it will be overwritten 
     ; from instr to timer.
          add a         ; instr expect note *2 (offset in periods table)
          ld e,a        ; note 
          ld ixh,0      ; volume (substracted)
          ld bc,0       ; shift
          ld a,&3F:ld (r7),a
; Mimic ply.o pre-loop (for fx management)
; For now, don't inline, to trigger timer at RET point.
          ex af,af
          call preplay_init
          ld (save_sp+1),sp
          ld sp,instr_code_pnt
 ; jump to instr code and then back at play_return
          RET_ROUT(29+6) ;+6: ld sp,n:jp n
play_return
save_sp   ld sp,0
; Mimic ply.o post-loop (for fx management)
; For now, don't inline, for symetry.
          jp postplay

      IF dev_checks
_check_di
          SUB_TM''(8+13)
          push af
          ld a,i:call pe,fail
          pop af
          ret
      END

      END
; ---------------------------------

      IF ayane

instr_code_pnt WORD instr_code ; Fixed MSB
instr_param WORD 
      WORD psg_regs+[&3F XOR &12] ; mask channel B
      WORD psg_regs+9   ; -> channel B
      WORD play_return
          3 ** WORD &BE00 ; sanity

      IF instr_param - instr_code_pnt - 2
   !!! must be contiguous
      END

      END

instr_state_pnt WORD instr_state

hi
      IF ayane
      FILL -$ AND &FF,&F7
instr_state
      FILL &0100,&F7
      ELSE
instr_state = compiled_instr_buf
      END
